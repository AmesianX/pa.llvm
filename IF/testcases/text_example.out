Args: opt -load /usr/local/lib/IF.so -IF -stats -debug text_example.ll 
WARNING: You're attempting to print out a bitcode file.
This is inadvisable as it may cause display problems. If
you REALLY want to taste LLVM bitcode first-hand, you
can force output with the `-f' option.

Change Value Analysis on function 'gcd'

Popped off ChI-WL:   ret i32 %12

Popped off I-WL:   store i32 %c, i32* %c.addr, align 4

Popped off I-WL:   store i32 %a_i, i32* %a_i.addr, align 4

 Low       :  store i32 %a_i, i32* %a_i.addr, align 4 Retained to Low 

 Low       :  store i32 %c, i32* %c.addr, align 4 Retained to Low 

 High      :  ret i32 %12
Change Value Analysis on function 'get_gcd_sum'

Popped off ChI-WL:   ret i32 %19

Popped off I-WL:   store i32 %c, i32* %c.addr, align 4

Popped off I-WL:   store i32 %a_len, i32* %a_len.addr, align 4

Popped off I-WL:   store i32* %a, i32** %a.addr, align 4

 Low       :  store i32* %a, i32** %a.addr, align 4 Retained to Low 

 Low       :  store i32 %a_len, i32* %a_len.addr, align 4 Retained to Low 

 Low       :  store i32 %c, i32* %c.addr, align 4 Retained to Low 

 High      :  ret i32 %19
===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

  2 if - Number of Instructions in High Privilege (Using IF)
  5 if - Number of Instructions in Low Privilege (Using IF)
100 if - Number of Instructions in Unknown Privilege (Using IF)

Args: opt -load /usr/local/lib/IF.so -mem2reg -IF -stats -debug text_example.ll 
WARNING: You're attempting to print out a bitcode file.
This is inadvisable as it may cause display problems. If
you REALLY want to taste LLVM bitcode first-hand, you
can force output with the `-f' option.

Change Value Analysis on function 'gcd'

Popped off ChI-WL:   ret i32 %m.3

Popped off I-WL:   %call1 = call i32 @abs(i32 %c) nounwind readnone

Popped off I-WL:   %call = call i32 @abs(i32 %a_i) nounwind readnone

Popped off ChI-WL:   %cmp = icmp eq i32 %call, 0

Popped off ChI-WL:   br i1 %cmp, label %if.then, label %if.else

Popped off ChI-WL:   %m.0 = phi i32 [ %call, %if.then3 ], [ %m.1, %if.end ]

Popped off ChI-WL:   %cmp4 = icmp ne i32 %m.0, %n.0

Popped off ChI-WL:   br i1 %cmp4, label %while.body, label %while.end

Popped off ChI-WL:   %cmp5 = icmp sgt i32 %m.0, %n.0

Popped off ChI-WL:   br i1 %cmp5, label %if.then6, label %if.else7

Popped off ChI-WL:   %sub = sub nsw i32 %m.0, %n.0

Popped off ChI-WL:   %sub8 = sub nsw i32 %n.0, %m.0

Popped off ChI-WL:   %n.1 = phi i32 [ %n.0, %if.then6 ], [ %sub8, %if.else7 ]

Popped off ChI-WL:   %m.1 = phi i32 [ %sub, %if.then6 ], [ %m.0, %if.else7 ]

Popped off ChI-WL:   %m.2 = phi i32 [ %m.0, %while.end ], [ %call, %if.else ]

Popped off ChI-WL:   %m.3 = phi i32 [ 1073741823, %if.then ], [ %m.2, %if.end9 ]

Popped off ChI-WL:   %cmp2 = icmp ne i32 %call1, 0

Popped off ChI-WL:   br i1 %cmp2, label %if.then3, label %if.end9

Popped off ChI-WL:   %n.0 = phi i32 [ %call1, %if.then3 ], [ %n.1, %if.end ]

 Low       :  %call = call i32 @abs(i32 %a_i) nounwind readnone Retained to Low 

 Low       :  %call1 = call i32 @abs(i32 %c) nounwind readnone Retained to Low 

 High      :  %cmp = icmp eq i32 %call, 0

 High      :  br i1 %cmp, label %if.then, label %if.else

 High      :  %cmp2 = icmp ne i32 %call1, 0

 High      :  br i1 %cmp2, label %if.then3, label %if.end9

 High      :  %m.0 = phi i32 [ %call, %if.then3 ], [ %m.1, %if.end ]

 High      :  %n.0 = phi i32 [ %call1, %if.then3 ], [ %n.1, %if.end ]

 High      :  %cmp4 = icmp ne i32 %m.0, %n.0

 High      :  br i1 %cmp4, label %while.body, label %while.end

 High      :  %cmp5 = icmp sgt i32 %m.0, %n.0

 High      :  br i1 %cmp5, label %if.then6, label %if.else7

 High      :  %sub = sub nsw i32 %m.0, %n.0

 High      :  %sub8 = sub nsw i32 %n.0, %m.0

 High      :  %m.1 = phi i32 [ %sub, %if.then6 ], [ %m.0, %if.else7 ]

 High      :  %n.1 = phi i32 [ %n.0, %if.then6 ], [ %sub8, %if.else7 ]

 High      :  %m.2 = phi i32 [ %m.0, %while.end ], [ %call, %if.else ]

 High      :  %m.3 = phi i32 [ 1073741823, %if.then ], [ %m.2, %if.end9 ]

 High      :  ret i32 %m.3
Change Value Analysis on function 'get_gcd_sum'

Popped off ChI-WL:   ret i32 %gsum.2

Popped off I-WL:   %div = sdiv i32 %gsum.2, %c

Popped off I-WL:   %rem = srem i32 %c, 10

Popped off I-WL:   %call = call i32 @gcd(i32 %1, i32 %c)

Popped off I-WL:   %cmp2 = icmp eq i32 %c, 0

Popped off I-WL:   %gsum.2 = phi i32 [ %c, %if.then ], [ %gsum.1, %if.end ]

Popped off I-WL:   %cmp5 = icmp slt i32 %i.0, %a_len

Popped off I-WL:   %cmp = icmp eq i32 %a_len, 0

Popped off I-WL:   %arrayidx6 = getelementptr inbounds i32* %a, i32 %i.0

Popped off I-WL:   %arrayidx = getelementptr inbounds i32* %a, i32 0

Popped off I-WL:   %tobool = icmp ne i32* %a, null

Popped off ChI-WL:   br i1 %tobool, label %lor.lhs.false, label %if.then

Popped off ChI-WL:   %0 = load i32* %arrayidx, align 4

Popped off ChI-WL:   %cmp1 = icmp eq i32 %0, 0

Popped off ChI-WL:   br i1 %cmp1, label %land.lhs.true, label %if.else4

Popped off ChI-WL:   %1 = load i32* %arrayidx6, align 4

Popped off ChI-WL:   %call = call i32 @gcd(i32 %1, i32 %c)

Popped off ChI-WL:   br i1 %cmp, label %if.then, label %if.else

Popped off ChI-WL:   br i1 %cmp5, label %for.body, label %for.end

Popped off ChI-WL:   %div = sdiv i32 %gsum.2, %c

Popped off ChI-WL:   br i1 %cmp2, label %if.then3, label %if.else4

Popped off ChI-WL:   %add = add nsw i32 %gsum.0, %call

Popped off ChI-WL:   %gsum.0 = phi i32 [ 0, %if.else4 ], [ %add, %for.inc ]

Popped off ChI-WL:   %gsum.1 = phi i32 [ 1073741823, %if.then3 ], [ %gsum.0, %for.end ]

Popped off ChI-WL:   %gsum.2 = phi i32 [ %c, %if.then ], [ %gsum.1, %if.end ]

Popped off ChI-WL:   %arrayidx8 = getelementptr inbounds i32* %2, i32 %rem

Popped off ChI-WL:   store i32 %div, i32* %arrayidx8, align 4

 Low       :  %tobool = icmp ne i32* %a, null Retained to Low 

 High      :  br i1 %tobool, label %lor.lhs.false, label %if.then

 Low       :  %cmp = icmp eq i32 %a_len, 0 Retained to Low 

 High      :  br i1 %cmp, label %if.then, label %if.else

 Low       :  %arrayidx = getelementptr inbounds i32* %a, i32 0 Retained to Low 

 High      :  %0 = load i32* %arrayidx, align 4

 High      :  %cmp1 = icmp eq i32 %0, 0

 High      :  br i1 %cmp1, label %land.lhs.true, label %if.else4

 Low       :  %cmp2 = icmp eq i32 %c, 0 Retained to Low 

 High      :  br i1 %cmp2, label %if.then3, label %if.else4

 High      :  %gsum.0 = phi i32 [ 0, %if.else4 ], [ %add, %for.inc ]

 Low       :  %cmp5 = icmp slt i32 %i.0, %a_len Retained to Low 

 High      :  br i1 %cmp5, label %for.body, label %for.end

 Low       :  %arrayidx6 = getelementptr inbounds i32* %a, i32 %i.0 Retained to Low 

 High      :  %1 = load i32* %arrayidx6, align 4

 High      :  %call = call i32 @gcd(i32 %1, i32 %c)

 High      :  %add = add nsw i32 %gsum.0, %call

 High      :  %gsum.1 = phi i32 [ 1073741823, %if.then3 ], [ %gsum.0, %for.end ]

 High      :  %gsum.2 = phi i32 [ %c, %if.then ], [ %gsum.1, %if.end ]

 Low       :  %rem = srem i32 %c, 10 Retained to Low 

 High      :  %div = sdiv i32 %gsum.2, %c

 High      :  %arrayidx8 = getelementptr inbounds i32* %2, i32 %rem

 High      :  store i32 %div, i32* %arrayidx8, align 4

 High      :  ret i32 %gsum.2
===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

34 if      - Number of Instructions in High Privilege (Using IF)
 9 if      - Number of Instructions in Low Privilege (Using IF)
17 if      - Number of Instructions in Unknown Privilege (Using IF)
10 mem2reg - Number of PHI nodes inserted
10 mem2reg - Number of alloca's promoted
 6 mem2reg - Number of alloca's promoted with a single store

Args: opt -load /usr/local/lib/IF.so -IF -stats -debug text_example.ll 
WARNING: You're attempting to print out a bitcode file.
This is inadvisable as it may cause display problems. If
you REALLY want to taste LLVM bitcode first-hand, you
can force output with the `-f' option.

Change Value Analysis on function 'gcd'

Popped off ChI-WL:   ret i32 %12

Popped off I-WL:   store i32 %c, i32* %c.addr, align 4

Popped off I-WL:   store i32 %a_i, i32* %a_i.addr, align 4

 Low       :  store i32 %a_i, i32* %a_i.addr, align 4 Retained to Low 

 Low       :  store i32 %c, i32* %c.addr, align 4 Retained to Low 

 High      :  ret i32 %12
Change Value Analysis on function 'get_gcd_sum'

Popped off ChI-WL:   ret i32 %19

Popped off I-WL:   store i32 %c, i32* %c.addr, align 4

Popped off I-WL:   store i32 %a_len, i32* %a_len.addr, align 4

Popped off I-WL:   store i32* %a, i32** %a.addr, align 4

 Low       :  store i32* %a, i32** %a.addr, align 4 Retained to Low 

 Low       :  store i32 %a_len, i32* %a_len.addr, align 4 Retained to Low 

 Low       :  store i32 %c, i32* %c.addr, align 4 Retained to Low 

 High      :  ret i32 %19
===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

  2 if - Number of Instructions in High Privilege (Using IF)
  5 if - Number of Instructions in Low Privilege (Using IF)
100 if - Number of Instructions in Unknown Privilege (Using IF)

